openapi: 3.0.0
servers:
  - description: localhost
    url: http://localhost:8080
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/TOXOGE9785_1/Mythostrike/1.0.0
info:
  version: 1.0.0
  title: Mythostrike
  description: The API for the Web Game Mythostrike
tags:
  - name: Resources
    description: All Game Data
  - name: Users
    description: User Management and Data
  - name: Lobby
    description: Control the Lobby
  - name: Game
    description: In-Game moves
paths:
  /resources/cards:
    get:
      tags:
        - Resources
      operationId: getCards
      summary: All Cards
      description: Get a list of all game cards
      security:
        - { }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CardList"
  /resources/modes:
    get:
      tags:
        - Resources
      operationId: getGameModes
      summary: All game modes
      description: Get a list of all game modes
      security:
        - { }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModeList"
  /resources/champions:
    get:
      tags:
        - Resources
      operationId: getChampions
      summary: All champions
      description: Get a list of all game champions
      security:
        - { }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChampionList"
  /users/register:
    post:
      tags:
        - Users
      operationId: register
      summary: User registration
      description: Request for user registration
      security:
        - { }
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAuthRequest'
      responses:
        "201":
          description: successfully registered user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAuthResponse"
        "409":
          description: user already exists
  /users/login:
    post:
      tags:
        - Users
      operationId: login
      summary: User login
      description: Request for user login
      security:
        - { }
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserAuthRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAuthResponse"
        "401":
          description: Wrong username or password
  /users/data:
    post:
      tags:
        - Users
      operationId: getUserData
      summary: User data
      description: Request for user data from the system
      security:
        - bearerAuth: [ user ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfo"
  /users/avatar:
    post:
      tags:
        - Users
      operationId: avatar
      summary: Select avatar
      description: Change avatar picture for the user
      security:
        - bearerAuth: [ user ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserAvatarRequest"
      responses:
        "200":
          description: OK
  /users/ranklist:
    get:
      tags:
        - Users
      operationId: getRanklist
      summary: player Ranklist
      description: Get a list of all players
      security:
        - { }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRankList"

  /lobbies:
    get:
      tags:
        - Lobby
      operationId: getLobbyOverview
      summary: All lobbies
      description: Get a list of lobbies with details
      security:
        - { }
      responses:
        "200":
          description: Lobby overview
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LobbyList"
    post:
      tags:
        - Lobby
      operationId: createLobby
      summary: Create lobby
      description: Request to create a new lobby
      security:
        - bearerAuth: [ user ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateLobbyRequest"
      responses:
        "201":
          description: Successfully created lobby
          content:
            integer:
              schema:
                $ref: "#/components/schemas/Lobby"

  /lobbies/join:
    post:
      tags:
        - Lobby
      operationId: joinLobby
      summary: Join lobby
      description: Request to join a lobby
      security:
        - bearerAuth: [ user ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Lobby"
      responses:
        "200":
          description: Successfully joined lobby
        "400":
          description: Lobby already full
        "404":
          description: Lobby does not exist
  /lobbies/leave:
    post:
      tags:
        - Lobby
      operationId: leaveLobby
      summary: Leave lobby
      description: Request to leave the lobby
      security:
        - bearerAuth: [ user ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LobbyId"
      responses:
        "200":
          description: Successfully left the lobby
  /lobbies/mode:
    put:
      tags:
        - Lobby
      operationId: changeGameMode
      summary: Change game mode
      description: Request to change the game mode in the lobby
      security:
        - bearerAuth: [ user ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeModeRequest"
      responses:
        "200":
          description: Successfully updated game mode
  /lobbies/seats:
    put:
      tags:
        - Lobby
      operationId: changeSeat
      summary: Change seat
      description: Request to change the seat in the lobby
      security:
        - bearerAuth: [ user ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeSeatRequest"
      responses:
        "200":
          description: Successfully updated game mode
        "400":
          description: Seat is not empty
  /lobbies/start:
    post:
      tags:
        - Lobby
      operationId: startGame
      summary: Start game
      description: Request to start the game
      security:
        - bearerAuth: [ user ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LobbyId"
      responses:
        "201":
          description: Game started
        "400":
          description: Not enough players
  /lobbies/bot:
    post:
      tags:
        - Lobby
      operationId: addBot
      summary: Add bot
      description: Request to add a bot
      security:
        - bearerAuth: [ user ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LobbyId"
      responses:
        "200":
          description: Successfully added bot
        "400":
          description: Lobby is full
  /games/play/champion:
    post:
      tags:
        - Game
      operationId: selectedChampion
      summary: Select champion
      description: Request to use the selected champion for the game
      security:
        - bearerAuth: [ user ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SelectChampionRequest"
      responses:
        "200":
          description: Successfully selected the champion
  /games/play/cards:
    post:
      tags:
        - Game
      operationId: playedCards
      summary: Play cards
      description: Request to play the selected card(s) on the selected opponent(s).
      security:
        - bearerAuth: [ user ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlayCardRequest"
      responses:
        "200":
          description: OK
        "400":
          description: Too many or too less cards are selected
  /games/play/skills:
    post:
      tags:
        - Game
      operationId: usedSkills
      summary: Use skills
      description: Request to use the selected skill on the selected opponent(s).
      security:
        - bearerAuth: [ user ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlaySkillRequest"
      responses:
        "200":
          description: OK
  /games/play/end:
    post:
      tags:
        - Game
      operationId: endTurn
      summary: End turn
      description: Request to end the turn
      security:
        - bearerAuth: [ user ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LobbyId"
      responses:
        "200":
          description: OK
        "400":
          description: Player is in action
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    CardList:
      type: array
      items:
        $ref: "#/components/schemas/Card"
    Card:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: Nightmare
        description:
          type: string
          example: Pick a player and put...
        symbol:
          type: string
          example: Heart
        value:
          type: integer
          format: int32
          example: 3
        type:
          type: string
          example: Basic
    ModeList:
      type: array
      items:
        $ref: "#/components/schemas/Mode"
    Mode:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: FFA
        description:
          type: string
          example: In this game mode you can...
        minPlayer:
          type: integer
          format: int32
          example: 3
        maxPlayer:
          type: integer
          format: int32
          example: 6
    ChampionList:
      type: array
      items:
        $ref: "#/components/schemas/Champion"
    UserRankList:
      type: array
      items:
        $ref: "#/components/schemas/UserInfo"
    Champion:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 2
        name:
          type: string
          example: Apollo
        maxHp:
          type: integer
          format: int32
          example: 4
        activeSkills:
          type: array
          items:
            $ref: "#/components/schemas/ActiveSkill"
        passiveSkills:
          type: array
          items:
            $ref: "#/components/schemas/PassiveSkill"
    UserInfo:
      type: object
      properties:
        username:
          type: string
          example: Eason123
        drachma:
          type: integer
          format: int32
          example: 333
        rankPoints:
          type: integer
          format: int32
          example: 48
        avatarNumber:
          type: integer
          format: int32
          example: 2
    UserAuthRequest:
      type: object
      properties:
        username:
          type: string
          example: Eason123
        password:
          type: string
          example: BestPW123
    UserAvatarRequest:
      type: object
      properties:
        avatarNumber:
          type: integer
          format: int32
          example: 2
    UserAuthResponse:
      type: object
      properties:
        jwtToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    LobbyList:
      type: array
      items:
        $ref: "#/components/schemas/LobbyOverview"
    LobbyOverview:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 2
        owner:
          type: string
          example: Hyuman123
        status:
          type: string
          example: active
        mode:
          type: string
          example: FFA
        numberPlayers:
          type: integer
          format: int32
          example: 5
    LobbyId:
      type: object
      properties:
        lobbyId:
          type: integer
          format: int32
          example: 1
    ChangeModeRequest:
      type: object
      properties:
        lobbyId:
          type: integer
          format: int32
          example: 1
        newModeId:
          type: integer
          format: int32
          example: 0
    ChangeSeatRequest:
      type: object
      properties:
        lobbyId:
          type: integer
          format: int32
          example: 1
        newSeatId:
          type: integer
          format: int32
          example: 5
    CreateLobbyRequest:
      type: object
      properties:
        modeId:
          type: integer
          format: int32
          example: 0
    PlayCardRequest:
      type: object
      properties:
        lobbyId:
          type: integer
          format: int32
          example: 1
        cardIds:
          type: array
          items:
            type: integer
          example: [ 1000 ]
        targets:
          type: array
          items:
            type: string
          example: [ "Hyumin281", "Till", "Hong" ]
    PlaySkillRequest:
      type: object
      properties:
        lobbyId:
          type: integer
          format: int32
          example: 1
        skillId:
          type: integer
          format: int32
          example: 2
        targets:
          type: array
          items:
            type: string
          example: [ "Hyumin281", "Till", "Hong" ]
    ActiveSkill:
      type: object
      properties:
        name:
          type: string
          example: Revenge
        description:
          type: string
          example: Whenever you get Damage....
    PassiveSkill:
      type: object
      properties:
        name:
          type: string
          example: Infinity Dance
        description:
          type: string
          example: Every time you use....
    SelectChampionRequest:
      type: object
      properties:
        lobbyId:
          type: integer
          format: int32
          example: 1
        championId:
          type: integer
          format: int32
          example: 0
    SelectTargetsRequest:
      type: object
      properties:
        lobbyId:
          type: integer
          format: int32
          example: 1
        cardId:
          type: integer
          format: int32
          example: 0
        targets:
          type: array
          items:
            type: string
          example: [ "Hyumin281", "Till", "Hong" ]
    Lobby:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        owner:
          type: string
          example: Hyuman123
        mode:
          type: string
          example: FFA
        seats:
          type: array
          items:
            $ref: "#/components/schemas/LobbyUserInfo"
    LobbyUserInfo:
      type: object
      properties:
        username:
          type: string
          example: Eason123
        avatarNumber:
          type: integer
          format: int32
          example: 2
security:
  - bearerAuth:
      - user
